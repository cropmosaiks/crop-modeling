---
title: Final Figures
author: 
  - name: Cullen Molitor
    orcid: 0000-0001-8309-8821
    url: https://github.com/cullen-molitor
    affiliations:
      - ref: bren
  - name: Grace Lewin
    orcid: 0000-0001-7106-0201
    url: https://github.com/gracelewin
    affiliations:
      - ref: eemb
  - name: Juliet Cohen
    orcid: 0000-0001-8217-4028
    url: https://github.com/julietcohen
    affiliations:
      - ref: nceas
  - name: Steven Cognac
    orcid: 0000-0001-8803-3074
    url: https://github.com/cognack
    affiliations:
      - ref: bren
  - name: Jonathan Proctor
    orcid: 0000-0001-8053-8828
    url: https://www.jonathanproctor.org/
    affiliations:
      - ref: harvard
  - name: Tamma Carleton
    orcid: 0000-0002-5518-0550
    url: https://www.tammacarleton.com/
    affiliations:
      - ref: bren
affiliations:
  - id: bren
    name: Bren School of Environmental Science & Management, UC Santa Barbara
    city: Santa Barbara
    state: CA
  - id: eemb
    name: Ecology, Evolution, and Marine Biology, UC Santa Barbara
    city: Santa Barbara
    state: CA
  - id: nceas
    name: National Center for Ecological Analysis and Synthesis
    city: Santa Barbara
    state: CA
  - id: harvard
    name: Center for the Environment and Data Science Initiative, Harvard University
    city: Cambridge
    state: MA
date: '`r Sys.Date()`'
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-title: Contents
    toc-depth: 4
    number-sections: false
fig-cap-location: bottom
---

# Setup

```{r message=F, warning=F}
####################### R ENVIRONMENT #######################
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(here)

source(here::here('code', '4_explore_results', 'utility.R'))
```

# Climate exploration 

```{r}
districts_plus <- here::here('data', 'climate', 'NDVI', 'ZMB_ADM2.geojson') %>% 
  sf::read_sf() %>% 
  dplyr::select(shapeName) %>% 
  dplyr::rename(district_new = shapeName)

districts <- districts_plus %>% 
  sf::st_centroid() %>% 
  sf::st_join(country_shp, join = st_within) %>% 
  dplyr::tibble() %>% 
  dplyr::select(-geometry)
```

```{r}
crop_yield <- here::here('data', 'crop_yield',
                         'cfs_maize_districts_zambia_2009_2022.csv') %>% 
  readr::read_csv() %>% 
  select(year, district, yield_mt)

tp <- here::here('data', 'climate', 'temp_precip', 'temp_precip.csv') %>% 
  readr::read_csv() %>% 
  dplyr::select(-c(asdf_id, Level, Shape_Area, Shape_Leng, 
                   gqid, shapeGroup, shapeID, shapeType)) %>% 
  dplyr::rename(district_new = shapeName) %>% 
  tidyr::pivot_longer(cols = -district_new, names_to = 'date', values_to = 'value') %>% 
  tidyr::separate(date, into = c('tp','date', 'metric'), sep = "\\.") %>%  
  tidyr::separate(date, into = c('year', 'month'), sep = 4) %>% 
  dplyr::mutate(
    tp = case_when(tp == 'cru_ts_405_tmp_monthly_mean' ~ 'temp', T ~ 'precip'),
    year = as.numeric(year),
    month = as.numeric(month),
    year = dplyr::case_when(
      month %in% 10:12 ~ year + 1,
      T ~ year
    )) %>% 
  dplyr::filter(
    year >= 2009, 
    year < 2021, 
    metric %in% c('mean')) %>% 
  dplyr::left_join(districts)

temp <- tp %>% 
  dplyr::filter(tp == "temp") %>% 
  dplyr::group_by(district, year, month) %>% 
  dplyr::summarise(temp = mean(value, na.rm = TRUE)) %>% 
  tidyr::pivot_wider(names_from = month, values_from = temp, names_prefix = "temp_")

precip <- tp %>% 
  dplyr::filter(tp == "precip") %>% 
  dplyr::group_by(district, year, month) %>% 
  dplyr::summarise(precip = mean(value, na.rm = TRUE)) %>% 
  tidyr::pivot_wider(names_from = month, values_from = precip, names_prefix = "precip_")

ndvi <- here::here('data', 'climate', 'NDVI', 'NDVI.csv') %>% 
  readr::read_csv() %>% 
  dplyr::select(-c(asdf_id, Level, Shape_Area, Shape_Leng, 
                   gqid, shapeGroup, shapeID, shapeType)) %>% 
  dplyr::rename(district_new = shapeName) %>% 
  tidyr::pivot_longer(cols = -district_new, names_to = 'date', values_to = 'ndvi') %>% 
  tidyr::separate(date, into = c(NA,'date', 'metric'), sep = "\\.") %>%  
  tidyr::separate(date, into = c('year', 'month'), sep = 4) %>% 
  dplyr::mutate(
    year = as.numeric(year),
    month = as.numeric(month),
    year = dplyr::case_when(
      month %in% 10:12 ~ year + 1,
      T ~ year
    )) %>% 
  dplyr::filter(
    year >= 2009, 
    year < 2021, 
    metric %in% c('mean')) %>% 
  dplyr::left_join(districts) %>% 
  dplyr::select(-metric) %>% 
  dplyr::group_by(district, year, month) %>% 
  dplyr::summarise(ndvi = mean(ndvi, na.rm = TRUE)) %>% 
  dplyr::ungroup() %>% 
  dplyr::group_by(district, month) %>% 
  dplyr::mutate(ndvi = case_when(is.na(ndvi) ~ mean(ndvi, na.rm = TRUE), T ~ ndvi)) %>% 
  tidyr::pivot_wider(names_from = 'month', values_from = 'ndvi', names_prefix = "ndvi_")

climate <- temp %>% 
  dplyr::left_join(precip) %>% 
  dplyr::left_join(ndvi) %>% 
  dplyr::left_join(crop_yield) %>% 
  dplyr::ungroup() %>% 
  dplyr::relocate(yield_mt, .after = year)


readr::write_csv(climate, here::here('data', 'climate', 'climate_summary.csv'))
```


```{r}
library(glmnet)

### Split data into training and test sets
set.seed(42) 

clim <- climate %>% 
  dplyr::mutate(
    across(.cols = 4:39, .fns = , ~(scale(.) %>% as.vector)),
    yield_mt = log10(1+yield_mt))

# round(colMeans(clim[, 4:39]), 10) 

df <- clim
# df <- dplyr::select(clim, 1:15)
# df <- dplyr::select(clim, 1:3, 16:27)
# df <- dplyr::select(clim, 1:3, 28:39)

index <- sample(1:nrow(df), 0.8*nrow(df)) 

train <- df[index,] # Create the training data 
test <- df[-index,] # Create the test data

# Create X matricies and y vectors from the train and test sets
# Note that the glmnet function does not work with dataframes, so we need to create a numeric matrix for the training features 
X_train <- as.matrix(subset(train, select = -c(yield_mt, year, district)))
y_train <- train$yield_mt

X_test <- as.matrix(subset(test, select = -c(yield_mt, year, district)))
y_test <- test$yield_mt

#save test set lat/lons for later
# plotting_coords <- subset(test, select = c(lon,lat))

# Train the ridge regression model, choosing the penalization parameter using cross-validation in the train set.
cv_ridge <- cv.glmnet(X_train, y_train, 
                      alpha = 0, # ridge regression
                      nfolds = 5)

# summarize chosen configuration 
optimal_lambda <- cv_ridge$lambda.min
print(paste0("optimal lambda: ", optimal_lambda))

#predict model
y_pred <- predict(cv_ridge, s = optimal_lambda, newx = X_test)

# Compute R^2 from true and predicted values
SSE <- sum((y_pred - y_test)^2)
SST <- sum((y_test - mean(y_test))^2)
r2 <- (1 - SSE / SST)

print(paste0('r2: ', r2))


#clip bounds so min value = 0 because we know that crop yield cannot be below zero. 
y_pred[y_pred<0] <- 0

#scatterplot
ggplot(data = NULL, aes(x=y_pred, y=y_test)) + 
  geom_point() +
  labs(x = "Predicted", y = "Observed")
```



# Zambian Districts

```{r fig.height=7, fig.width=8, warning=FALSE, message=FALSE}
africa <- ne_countries(scale = "medium", returnclass = "sf") %>% 
  dplyr::filter(continent == 'Africa')

extent <- terra::ext(zmb_union)
extent <- terra::as.polygons(extent)
terra::crs(extent) <- "epsg:4326"

provinces <- here::here('data', 'geo_boundaries', 'gadm36_ZMB_1.shp') %>% 
  sf::read_sf() %>% 
  dplyr::rename('province' = NAME_1)

ybreaks <- c(-8, -10, -12, -14, -16, -18)
ylabs <- paste0(ybreaks,'°S')

xbreaks <- c(22, 24, 26, 28, 30, 32, 34)
xlabs <- paste0(xbreaks,'°E')

inset <- ggplot() +
  geom_sf(data = africa, fill = "white", linewidth = 1) +
  geom_sf(data = extent, fill = NA, linewidth = 1, color = 'red') +
  theme_void() +
  theme(panel.border = element_rect(fill = NA),
        panel.background = element_rect(fill = alpha("white", .5)))

main <- ggplot() +
  geom_sf(data = country_shp, linewidth = .5, color = 'black', fill = "grey60") +
  geom_sf(data = provinces, linewidth = 1, color = 'black', fill = NA) +
  geom_sf_label(data = provinces, aes(label = province) )+
  scale_fill_viridis_d() +
  scale_size_identity() + 
  scale_x_continuous(breaks = xbreaks, labels = xlabs) +
  scale_y_continuous(breaks = ybreaks, labels = ylabs) +
  labs(x = NULL, y = NULL) +
  theme(legend.position = "right")

ggdraw() +
  draw_plot(main) +
  draw_plot(inset, x = 0.7, y = .06, width = .3, height = .3)
```

# Zambian Maize Growing Season

Ideas:
- redo x-axis to capture growing season - does this mean subset to only growing season months? this makes us unable to include satellite imagery span for sentinel
DONE - label planting, CFS, and harvest
DONE - label prime imagery months may - oct - did this in a different way (separate bars for Sentinel & Landsat)
- add temperature? I downloaded monthly mean temp at same resolution but not sure if it would add anything
- Use climate data to see if any districts are drier/wetter than others on avg

```{r}
# manually define path to data
# zmb_precip_summary_path = here('data', 'climate', 'precipitation_monthly_mean.csv')
# zmb_precip_summary = read.csv(zmb_precip_summary_path)

# change custom months to only reflect growing season for clarity
#custom_months_subset <- c("Oct", "Nov", "Dec", "Jan", "Feb", "Mar", 
#                   "Apr", "May", "Jun")

# custom_months <- c("Oct", "Nov", "Dec", "Jan", "Feb", "Mar",
#                    "Apr", "May", "Jun", "Jul", "Aug", "Sep")
# 
# zmb_precip_summary <- here::here('data', 'climate', 'precipitation_monthly_mean.csv') %>% 
#   readr::read_csv() %>% 
#   mutate(month = factor(month, levels = custom_months))

ggplot(data = zmb_precip_summary) +
  aes(x = month, y = precipitation) +
  labs(x = "Month", y = "Precipitation (mm)") + # TO DO: confirm with cullen units are mm
  geom_col(fill = "dodgerblue3", color = "black", width = 0.80) +
  scale_y_continuous(expand = expansion(add = c(0, 20)), # removes buffer between x-axis and bars
                     breaks = seq(0, 275, 50)) + 
  theme_classic() +
  theme(panel.border = element_rect(color = "black",
                                    fill = NA,
                                    size = 1),
        axis.text.x = element_text(colour = "black"),
        axis.text.y = element_text(colour = "black")) +
  #scale_x_discrete(breaks = NULL) # supress vertical background lines
# ### SOWING
#   geom_segment(x = "Oct", xend = "Dec", y = 80, yend = 80,
#                lineend = 'round', size = 2) +
#   geom_label(x = "Dec",
#              y = 80, label = "Sowing",
#              hjust = 1.65, vjust = .5, size = 3) +
# ### GROWING
#   geom_segment(x = "Nov", xend = "May", y = 60, yend = 60,
#                lineend = 'round', size = 2) +
#   geom_label(x = "Feb",
#              y = 60, label = "Growing",
#              hjust = 1.1, vjust = .5, size = 3) +

### PLANTING - combines SOWING and GROWING into one time period for clarity
  geom_segment(x = "Oct", xend = "May", y = 80, yend = 80,
               lineend = 'round', size = 2) +
  geom_label(x = "Mar",
             y = 80, label = "Planting ",
             hjust = 1.65, vjust = .5, size = 3) +
  ### SENTINEL SATELLITE IMAGERY
  geom_segment(x = "Oct", xend = "Sep", y = 140, yend = 140,
               lineend = 'round', size = 2) +
  # geom_label(x = "May",
  #            y = 150, label = "Sentinel Satellite Imagery ",
  #            hjust = 1.65, vjust = .5, size = 3) +
  geom_text(aes(x = "Jul",
                 label = "Sentinel Satellite Imagery ", 
                 y = 150), 
             angle = 0, 
             size = 3,
             color = "black") +
  ### LANDSAT SATELLITE IMAGERY
  geom_segment(x = "May", xend = "Sep", y = 110, yend = 110,
               lineend = 'round', size = 2) +
  #geom_label(x = "Jul", nudge_x = 1, # trying to get label to right side more, nudge_x doesnt do anything
  #           y = 110, label = "Landsat Satellite Imagery ",
  #           hjust = 1.65, vjust = .5, size = 3) +
  geom_segment(x = "Oct", xend = "Oct", y = 110, yend = 110,
               lineend = 'round', size = 2) +
  geom_text(aes(x = "Jul",
                 label = "Landsat Satellite Imagery ", 
                 y = 120), 
             angle = 0, 
             size = 3,
             color = "black") +
  # geom_label(x = "Oct",
  #            y = 110, label = "Landsat Satellite Imagery ",
  #           hjust = 1.65, vjust = .5, size = 3) + # adding second segment to show that landsat satellite imagery extends into Oct
### CFS SURVEY
  geom_segment(x = "Apr", xend = "May", y = 40, yend = 40, 
               lineend = 'round', size = 2) +
  geom_label(x = "May",
             y = 40, label = "CFS ", # tried to rename CFS ttoSurvey for clarity (acronyms are hard to remember for readers, but Crop Forecast Survey is too long, and Survey is too long for the short line, should we have an * with CFS = Crop Forecast Survey?)
             hjust = 1.3, vjust = .5, size = 3) +
### HARVEST  
  geom_segment(x = "Apr", xend = "Jun", y = 20, yend = 20, 
               lineend = 'round', size = 2) +
  geom_label(x = "May",
             y = 20, label = "Harvest", 
             hjust = 0.5, vjust = 0.5, size = 3) 

```

# Zambian Cropland

```{r fig.height=8, fig.width=8, warning=FALSE, message=FALSE}
country_vect <- country_shp %>%
  sf::st_union() %>%
  terra::vect()
  
crop_land <- here::here("data", "land_cover", "ZMB_cropland_2019.tif") %>%
  terra::rast() %>%
  terra::crop(country_vect, mask=TRUE) %>% 
  terra::aggregate(fact=33, fun='mean', na.rm = TRUE)

crop_land <- crop_land * 100

ybreaks <- c(-8, -10, -12, -14, -16, -18)
ylabs <- paste0(ybreaks,'°S')

xbreaks <- c(22, 24, 26, 28, 30, 32, 34)
xlabs <- paste0(xbreaks,'°E')

ggplot() +
  tidyterra::geom_spatraster(data = crop_land) +
  geom_sf(data = country_shp, color = 'white', fill = NA, linewidth = .7) +
  scale_fill_viridis_c(na.value = NA, guide = guide_colorbar(title.position = "top")) +
  scale_x_continuous(breaks = xbreaks, labels = xlabs) +
  scale_y_continuous(breaks = ybreaks, labels = ylabs) +
  labs(fill = "Cropland Percentage") +
  theme(legend.position = "bottom")
```

# Model Results

```{r}
cat('Train on levels\n\tCoefficient of determination')
cat(paste0("\n\tVal:  ", r2_general(train_pred$log_yield,
                                     train_pred$kfold_cv_predictions)))
cat(paste0("\n\tTest: ", r2_general(test_pred$log_yield,
                                     test_pred$prediction)))
cat('\n\n\tPearsons correlation coefficient')
cat(paste0("\n\tVal:  ", r2_pears(train_pred$log_yield,
                                   train_pred$kfold_cv_predictions)))
cat(paste0("\n\tTest: ", r2_pears(test_pred$log_yield,
                                   test_pred$prediction)))

cat('\n\nTrain on levels, then demean\n\tCoefficient of determination')
cat(paste0("\n\tVal:  ", r2_general(train_pred$demean_yield, 
                                     train_pred$demean_cv_pred)))
cat(paste0("\n\tTest: ", r2_general(test_pred$demean_yield, 
                                     test_pred$demean_pred)))
cat('\n\n\tPearsons correlation coefficient')
cat(paste0("\n\tVal:  ", r2_pears(train_pred$demean_yield, 
                                   train_pred$demean_cv_pred)))
cat(paste0("\n\tTest: ", r2_pears(test_pred$demean_yield, 
                                   test_pred$demean_pred)))

cat('\n\nTrain on anomailes - best above \n\tCoefficient of determination')
cat(paste0("\n\tVal:  ", r2_general(anom_train_pred$yield_anom,
                                     anom_train_pred$kfold_cv_predictions)))
cat(paste0("\n\tTest: ", r2_general(anom_test_pred$yield_anom,
                                     anom_test_pred$prediction)))
cat('\n\n\tPearsons correlation coefficient')
cat(paste0("\n\tVal:  ", r2_pears(anom_train_pred$yield_anom, 
                                   anom_train_pred$kfold_cv_predictions)))
cat(paste0("\n\tTest: ", r2_pears(anom_test_pred$yield_anom, 
                                   anom_test_pred$prediction)))

cat('\n\nTrain on anomailes - best overall \n\tCoefficient of determination')
cat(paste0("\n\tVal:  ", r2_general(best_anom_train_pred$yield_anom,
                                     best_anom_train_pred$kfold_cv_predictions)))
cat(paste0("\n\tTest: ", r2_general(best_anom_test_pred$yield_anom,
                                     best_anom_test_pred$prediction)))
cat('\n\n\tPearsons correlation coefficient')
cat(paste0("\n\tVal:  ", r2_pears(best_anom_train_pred$yield_anom,
                                   best_anom_train_pred$kfold_cv_predictions)))
cat(paste0("\n\tTest: ", r2_pears(best_anom_test_pred$yield_anom,
                                   best_anom_test_pred$prediction)))
```

# Best General Model

```{r fig.height=3.5, fig.width=7}
val_R2  <- r2_general(train_pred$log_yield, train_pred$kfold_cv_predictions)
test_R2 <- r2_general(test_pred$log_yield, test_pred$prediction)

val_r2  <- r2_pears(train_pred$log_yield, train_pred$kfold_cv_predictions)
test_r2 <- r2_pears(test_pred$log_yield, test_pred$prediction)

train_n <- length(train_pred$prediction)
test_n  <- length(test_pred$prediction)

val_label  <- plot_label_3(R2 = val_R2, r2 = val_r2, n = train_n)
test_label <- plot_label_3(R2 = test_R2, r2 = test_r2, n = test_n)

p1 <- ggplot() +
  geom_point(data = summary_predictions,
             aes(x = log_yield, y = kfold_cv_predictions, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha)', y = 'Model estimate') +
  geom_text(data = NULL, aes(x = .06, y = .75), label = val_label) +
  scale_x_continuous(limits = c(0, .82)) +
  scale_y_continuous(limits = c(0, 0.82)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p1 <- ggExtra::ggMarginal(
  p1, type = "histogram", 
  groupFill = T
) 

p2 <- ggplot() +
  geom_point(data = filter(summary_predictions, split == 'test'),
             aes(x = log_yield, y = prediction, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha)', y = NULL) +
  geom_text(data = NULL, aes(x = .06, y = .75), label = test_label) +
  scale_x_continuous(limits = c(0, .82)) +
  scale_y_continuous(limits = c(0, 0.82)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p2 <- ggExtra::ggMarginal(
  p2, type = "histogram", 
  groupFill = T
) 
cowplot::plot_grid(p1, p2, labels=c("(a)", "(b)"), ncol = 2, nrow = 1)
```

# Demeaned Best General Model

```{r fig.height=3.5, fig.width=7}
val_R2  <- r2_general(train_pred$demean_yield, train_pred$demean_cv_pred)
test_R2 <- r2_general(test_pred$demean_yield, test_pred$demean_pred)

val_r2  <- r2_pears(train_pred$demean_yield, train_pred$demean_cv_pred)
test_r2 <- r2_pears(test_pred$demean_yield, test_pred$demean_pred)

train_n <- length(train_pred$prediction)
test_n  <- length(test_pred$prediction)

val_label  <- plot_label_3(R2 = val_R2, r2 = val_r2, n = train_n)
test_label <- plot_label_3(R2 = test_R2, r2 = test_r2, n = test_n)

p1 <- ggplot() +
  geom_point(data = train_pred,
             aes(x = demean_yield, y = demean_cv_pred, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha) - mean(log(1+mt/ha))', y = 'Demeaned model estimate') +
  geom_text(data = NULL, aes(x = -.35, y = .35), label = val_label) +
  scale_x_continuous(limits = c(-0.4, 0.4)) +
  scale_y_continuous(limits = c(-0.4, 0.4)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p1 <- ggExtra::ggMarginal(
  p1, type = "histogram", 
  groupFill = T
) 

p2 <- ggplot() +
  geom_point(data = filter(test_pred, split == 'test'),
             aes(x = demean_yield, y = demean_pred, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha) - mean(log(1+mt/ha))', y = NULL) +
  geom_text(data = NULL, aes(x = -.35, y = .35), label = test_label) +
  scale_x_continuous(limits = c(-0.4, 0.4)) +
  scale_y_continuous(limits = c(-0.4, 0.4)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p2 <- ggExtra::ggMarginal(
  p2, type = "histogram", 
  groupFill = T
) 
plot_grid(p1, p2, labels=c("(a)", "(b)"), ncol = 2, nrow = 1)
```

# Anomaly of Best General Model

```{r fig.height=3.5, fig.width=7}
val_R2  <- r2_general(anom_train_pred$yield_anom, anom_train_pred$kfold_cv_predictions)
test_R2 <- r2_general(anom_test_pred$yield_anom, anom_test_pred$prediction)

val_r2  <- r2_pears(anom_train_pred$yield_anom, anom_train_pred$kfold_cv_predictions)
test_r2 <- r2_pears(anom_test_pred$yield_anom, anom_test_pred$prediction)

train_n <- length(anom_train_pred$kfold_cv_predictions)
test_n  <- length(anom_test_pred$prediction)

val_label  <- plot_label_3(R2 = val_R2, r2 = val_r2, n = train_n)
test_label <- plot_label_3(R2 = test_R2, r2 = test_r2, n = test_n)

p1 <- ggplot() +
  geom_point(data = anom_train_pred,
             aes(x = yield_anom, y = kfold_cv_predictions, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha) - mean(log(1+mt/ha))', y = 'Anomaly model estimate') +
  geom_text(data = NULL, aes(x = -.35, y = .35), label = val_label) +
  scale_x_continuous(limits = c(-0.4, 0.4)) +
  scale_y_continuous(limits = c(-0.4, 0.4)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p1 <- ggExtra::ggMarginal(
  p1, type = "histogram", 
  groupFill = T
) 

p2 <- ggplot() +
  geom_point(data = filter(anom_test_pred, split == 'test'),
             aes(x = yield_anom, y = prediction, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha) - mean(log(1+mt/ha))', y = NULL) +
  geom_text(data = NULL, aes(x = -.35, y = .35), label = test_label) +
  scale_x_continuous(limits = c(-0.4, 0.4)) +
  scale_y_continuous(limits = c(-0.4, 0.4)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p2 <- ggExtra::ggMarginal(
  p2, type = "histogram", 
  groupFill = T
) 
plot_grid(p1, p2, labels=c("(a)", "(b)"), ncol = 2, nrow = 1)
```

# Best Over Time Model

```{r fig.height=3.5, fig.width=7}
val_R2  <- r2_general(best_anom_train_pred$yield_anom, best_anom_train_pred$kfold_cv_predictions)
test_R2 <- r2_general(best_anom_test_pred$yield_anom, best_anom_test_pred$prediction)

val_r2  <- r2_pears(best_anom_train_pred$yield_anom, best_anom_train_pred$kfold_cv_predictions)
test_r2 <- r2_pears(best_anom_test_pred$yield_anom, best_anom_test_pred$prediction)

train_n <- length(best_anom_train_pred$kfold_cv_predictions)
test_n  <- length(best_anom_test_pred$prediction)

val_label  <- plot_label_3(R2 = val_R2, r2 = val_r2, n = train_n)
test_label <- plot_label_3(R2 = test_R2, r2 = test_r2, n = test_n)

p1 <- ggplot() +
  geom_point(data = best_anom_train_pred,
             aes(x = yield_anom, y = kfold_cv_predictions, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha) - mean(log(1+mt/ha))', y = 'Anomaly model estimate') +
  geom_text(data = NULL, aes(x = -.35, y = .35), label = val_label) +
  scale_x_continuous(limits = c(-0.4, 0.4)) +
  scale_y_continuous(limits = c(-0.4, 0.4)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p1 <- ggExtra::ggMarginal(
  p1, type = "histogram", 
  groupFill = T
) 

p2 <- ggplot() +
  geom_point(data = filter(best_anom_test_pred, split == 'test'),
             aes(x = yield_anom, y = prediction, color = as.factor(year))) +
  geom_abline() +
  scale_color_viridis_d() +
  labs(color = NULL, x = 'log(1+mt/ha) - mean(log(1+mt/ha))', y = NULL) +
  geom_text(data = NULL, aes(x = -.35, y = .35), label = test_label) +
  scale_x_continuous(limits = c(-0.4, 0.4)) +
  scale_y_continuous(limits = c(-0.4, 0.4)) +
  theme(legend.position = c(.9, .35)
        ,legend.background = element_rect(fill = alpha(.75))
  ) 

p2 <- ggExtra::ggMarginal(
  p2, type = "histogram", 
  groupFill = T
) 
plot_grid(p1, p2, labels=c("(a)", "(b)"), ncol = 2, nrow = 1)
```




